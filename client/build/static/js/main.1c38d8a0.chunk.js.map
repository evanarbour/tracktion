{"version":3,"sources":["utils/actions.js","utils/reducers.js","utils/store.js","components/Navbar.js","components/Footer.js","utils/mutations.js","utils/auth.js","pages/SignIn.js","pages/SignUp.js","pages/NotFound.js","utils/queries.js","components/HabitForm.js","components/HabitList.js","components/GoalForm.js","components/GoalList.js","pages/Dashboard.js","pages/GoalPage.js","pages/HabitPage.js","App.js","serviceWorker.js","index.js"],"names":["ADD_HABIT","SET_USER","intitialState","username","email","goals","habits","store","createStore","state","action","type","payload","window","__REDUX_DEVTOOLS_EXTENSION__","Navbar","Footer","LOGIN","gql","ADD_USER","ADD_GOAL","ADD_GOAL_STEP","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","removeItem","location","assign","theme","createTheme","SignIn","useState","password","formState","setFormState","useMutation","login","dispatch","error","useDispatch","handleFormSubmit","useSelector","event","a","preventDefault","variables","mutationResponse","data","Auth","user","console","log","handleChange","target","name","value","ThemeProvider","Link","href","Box","component","onSubmit","noValidate","sx","mt","Grid","container","alignItems","justifyContent","direction","item","TextField","id","label","onChange","Button","variant","color","SignUp","addUser","Container","maxWidth","NotFound","QUERY_ME","HabitForm","newHabit","setNewHabit","HabitList","CssBaseline","spacing","xs","GoalForm","steps","endDate","update","cache","addGoal","readQuery","query","writeQuery","e","LocalizationProvider","dateAdapter","AdapterDateFns","marginTop","display","flexDirection","Avatar","m","bgcolor","Typography","margin","fullWidth","placeholder","autoComplete","autoFocus","mb","GoalList","className","map","goal","style","fontSize","_id","Dashboard","useQuery","loading","textAlign","p","borderRadius","to","GoalPage","HabitPage","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","InMemoryCache","App","ApolloProvider","exact","path","default","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1c38d8a0.chunk.js","sourcesContent":["export const ADD_HABIT = \"ADD_HABIT\";\nexport const ADD_GOAL = \"ADD_GOAL\";\nexport const ADD_GOAL_STEP = \"ADD_GOAL_STEP\";\n\nexport const UPDATE_HABIT = \"UPDATE_HABIT\";\nexport const TOGGLE_TRACKTION_DAY = \"TOGGLE_TRACKTION_DAY\";\nexport const UPDATE_GOAL = \"UPDATE_GOAL\";\nexport const TOGGLE_GOAL_STEP = \"TOGGLE_GOAL_STEP\";\n\nexport const REMOVE_HABIT = \"REMOVE_HABIT\";\nexport const REMOVE_GOAL = \"REMOVE_GOAL\";\nexport const REMOVE_GOAL_STEP = \"REMOVE_GOAL_STEP\";\n\nexport const SET_USER = \"SET_USER\";\n\n// export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\n\n// export const ADD_TO_CART = \"ADD_TO_CART\";\n// export const ADD_MULTIPLE_TO_CART = \"ADD_MULTIPLE_TO_CART\";\n// export const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\n// export const CLEAR_CART = \"CLEAR_CART\";\n// export const UPDATE_CART_QUANTITY = \"UPDATE_CART_QUANTITY\";\n// export const TOGGLE_CART = \"TOGGLE_CART\";\n\n// export const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\n// export const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n","import {\n  ADD_HABIT,\n  SET_USER,\n  ADD_GOAL,\n  ADD_GOAL_STEP,\n  UPDATE_HABIT,\n  TOGGLE_TRACKTION_DAY,\n  UPDATE_GOAL,\n  TOGGLE_GOAL_STEP,\n  REMOVE_HABIT,\n  REMOVE_GOAL,\n  REMOVE_GOAL_STEP\n} from './actions';\n\nconst intitialState = {\n  username: '',\n  email: '',\n  goals: [],\n  habits: []\n}\n\n// The reducer is a function that accepts the current state and an action. It returns a new state based on that action.\nexport const reducer = (state = intitialState, action) => {\n  switch (action.type) {\n    case ADD_HABIT: {\n      return {\n        ...state,\n        habits: [...state.habits, action.payload]\n        // [...action.habits]\n      }\n    }\n    case SET_USER: {\n      return {\n        ...state,\n        ...action.payload\n      }\n    }\n    case ADD_GOAL:\n      return state;\n    case ADD_GOAL_STEP:\n      return state;\n    case UPDATE_HABIT:\n      return state;\n    case TOGGLE_TRACKTION_DAY:\n      return state;\n    case UPDATE_GOAL:\n      return state;\n    case TOGGLE_GOAL_STEP:\n      return state;\n    case REMOVE_HABIT:\n      return state;\n    case REMOVE_GOAL:\n      return state;\n    case REMOVE_GOAL_STEP:\n      return state;\n    // Returns a copy of state with an update products array. We use the action.products property and spread it's contents into the new array.\n    // case UPDATE_PRODUCTS:\n    //   return {\n    //     ...state,\n    //     products: [...action.products],\n    //   };\n\n    // case ADD_TO_CART:\n    //   return {\n    //     ...state,\n    //     cartOpen: true,\n    //     cart: [...state.cart, action.product],\n    //   };\n    // case ADD_MULTIPLE_TO_CART:\n    //   return {\n    //     ...state,\n    //     cart: [...state.cart, ...action.products],\n    //   };\n    // // Returns a copy of state, sets the cartOpen to true and maps through the items in the cart.\n    // // If the item's `id` matches the `id` that was provided in the action.payload, we update the purchase quantity.\n    // case UPDATE_CART_QUANTITY:\n    //   return {\n    //     ...state,\n    //     cartOpen: true,\n    //     cart: state.cart.map((product) => {\n    //       if (action._id === product._id) {\n    //         product.purchaseQuantity = action.purchaseQuantity;\n    //       }\n    //       return product;\n    //     }),\n    //   };\n\n    // // First we iterate through each item in the cart and check to see if the `product._id` matches the `action._id`\n    // // If so, we remove it from our cart and set the updated state to a variable called `newState`\n    // case REMOVE_FROM_CART:\n    //   let newState = state.cart.filter((product) => {\n    //     return product._id !== action._id;\n    //   });\n\n    //   // Then we return a copy of state and check to see if the cart is empty.\n    //   // If not, we set the cartOpen status to  `true`. Then we return an updated cart array set to the value of `newState`.\n    //   return {\n    //     ...state,\n    //     cartOpen: newState.length > 0,\n    //     cart: newState,\n    //   };\n\n    // case CLEAR_CART:\n    //   return {\n    //     ...state,\n    //     cartOpen: false,\n    //     cart: [],\n    //   };\n\n    // case TOGGLE_CART:\n    //   return {\n    //     ...state,\n    //     cartOpen: !state.cartOpen,\n    //   };\n\n    // case UPDATE_CATEGORIES:\n    //   return {\n    //     ...state,\n    //     categories: [...action.categories],\n    //   };\n\n    // case UPDATE_CURRENT_CATEGORY:\n    //   return {\n    //     ...state,\n    //     currentCategory: action.currentCategory,\n    //   };\n\n    // Return the state as is in the event that the `action.type` passed to our reducer was not accounted for by the developers\n    // This saves us from a crash.\n    default:\n      return state;\n  }\n};\n\n// export function useProductReducer(initialState) {\n//   return useReducer(reducer, initialState);\n// }\n","import { createStore } from 'redux';\n\nimport { reducer } from './reducers';\n\nconst store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default store;","import React from \"react\";\n\nfunction Navbar() {\n  return (\n    <div>\n      NAVBAR TEXT GOES HERE!\n    </div>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\n\nfunction Footer() {\n  return (\n    <footer>\n      FOOTER TEXT GOES HERE!\n    </footer>\n  );\n}\n\nexport default Footer;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\nmutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n        token\n        user {\n            _id\n            username\n                email\n                habits {\n                    _id\n                    name\n                    tracktionDays\n                    createdAt\n                }\n                sharedHabits {\n                    _id\n                    name\n                    tracktionDays\n                    createdAt\n                }\n                goals {\n                    _id\n                    name\n                    goalSteps {\n                        _id\n                        name\n                        completed\n                    }\n                    goalEndDate\n                    createdAt\n                }\n        }\n    }\n}\n`;\n                \n\nexport const ADD_USER = gql`\nmutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n        token\n        user {\n            _id\n            username\n        }\n    }\n}\n`;\n\n\nexport const ADD_HABIT = gql`\n    mutation addHabit($name: String!) {\n        addHabit(name: $name) {\n            _id\n            name\n            tracktionDays\n            createdAt\n        }\n    }\n`;\n\nexport const ADD_GOAL = gql`\n    mutation addGoal($name: String!, $steps: [String]!, $endDate: Date) {\n        addGoal(name: $name, steps: $steps, endDate: $endDate) {\n            _id\n            name\n            goalSteps {\n                _id\n                name\n                completed\n            }\n            goalEndDate\n            createdAt\n        }\n    }\n`;\n\nexport const ADD_GOAL_STEP = gql`\n    mutation addGoalStep($id: ID!, $name: String!) {\n        addGoalStep(goalId: $id, name: $name) {\n            _id\n            name\n            goalSteps {\n                _id\n                name\n                completed\n            }\n            goalEndDate\n            createdAt\n        }\n    }\n`;\n\nexport const UPDATE_HABIT = gql`\n    mutation updateHabit($id: ID!, $input: TracktionDaysInput) {\n        updateHabit(habitId: $id, input: $input) {\n            _id\n            name\n            tracktionDays\n            createdAt\n        }\n    }\n`;\n\nexport const UPDATE_GOAL = gql`\n    mutation updateGoal($id: ID!, $endDate: Date) {\n        updateGoal(goalId: $id, endDate: $endDate) {\n            _id\n            name\n            goalSteps {\n                _id\n                name\n                completed\n            }\n            goalEndDate\n            createdAt\n        }\n    }\n`;\n\nexport const UPDATE_GOAL_STEP = gql`\n    mutation updateGoalStep($id: ID!, $completed: Boolean!) {\n        updateGoalStep(goalStepId: $id, completed: $completed) {\n            _id\n            name\n            completed\n        }\n    }\n`;\n\nexport const REMOVE_HABIT = gql`\n    mutation removeHabit($id: ID!) {\n        removeHabit(habitId: $id) {\n            _id\n            name\n            tracktionDays\n            createdAt\n        }\n    }\n`;\n\nexport const REMOVE_GOAL = gql`\n    mutation removeGoal($id: ID!) {\n        removeGoal(goalId: $id) {\n            _id\n            name\n            goalSteps {\n                _id\n                name\n                completed\n            }\n            goalEndDate\n            createdAt\n        }\n    }\n`;\n\nexport const REMOVE_GOAL_STEP = gql`\n    mutation removeGoalStep($id: ID!) {\n        removeGoalStep(goalStepId: $id) {\n            _id\n            name\n            completed\n        }\n    }\n`;\n","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    // window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useState } from \"react\";\n\nimport Button from \"@mui/material/Button\";\n\nimport TextField from \"@mui/material/TextField\";\n\nimport Link from \"@mui/material/Link\";\nimport Grid from \"@mui/material/Grid\";\nimport Box from \"@mui/material/Box\";\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\nimport Typography from \"@mui/material/Typography\";\nimport Container from \"@mui/material/Container\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\n\nimport { useMutation } from '@apollo/client';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { LOGIN } from '../utils/mutations';\nimport { SET_USER } from '../utils/actions';\nimport Auth from '../utils/auth';\n\nfunction Copyright(props) {\n  return (\n    <Typography\n      variant=\"body2\"\n      color=\"text.secondary\"\n      align=\"center\"\n      {...props}\n    >\n      {\"Copyright © \"}\n      <Link color=\"inherit\" href=\"https://mui.com/\">\n        Your Website\n      </Link>{\" \"}\n      {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n}\n\nconst theme = createTheme();\n\nexport default function SignIn() {\n  const [formState, setFormState] = useState({\n    email: '', \n    password: '' \n  });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const dispatch = useDispatch();\n  const state = useSelector((state) => state);\n  \n\n  const handleFormSubmit = async (event) => {\n    \n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { \n          email: formState.email,\n          password: formState.password },\n      });\n      \n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n      \n      dispatch({\n        type: SET_USER,\n        payload: mutationResponse.data.login.user\n      })\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Link href=\"/signup\">Click here to Sign Up!</Link>\n      <Box\n            component=\"form\"\n            onSubmit={handleFormSubmit}\n            noValidate\n            sx={{ mt: 1 }}\n          >\n        <Grid container alignItems=\"center\" justifyContent=\"center\"  direction=\"column\">\n          {/* <Grid item>\n            <TextField\n            id=\"username\"\n            name=\"username\"\n            label=\"username\"\n            type=\"text\"\n            value={formState.username}\n            onChange={handleChange}\n            />\n          </Grid> */}\n          <Grid item>\n            <TextField\n            id=\"email\"\n            name=\"email\"\n            label=\"email\"\n            type=\"email\"\n            value={formState.email}\n            onChange={handleChange}\n            />\n          </Grid>\n          <Grid item>\n            <TextField\n            id=\"password\"\n            name=\"password\"\n            label=\"password\"\n            type=\"password\"\n            value={formState.password}\n            onChange={handleChange}\n            />\n          </Grid>\n          <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n            Sign In\n          </Button>\n        </Grid>\n      </Box>\n    </ThemeProvider>\n  );\n}\n","import React, { useState } from 'react';\nimport Button from '@mui/material/Button';\nimport FormControl from '@mui/material/FormControl';\nimport TextField from '@mui/material/TextField';\nimport Link from '@mui/material/Link';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Copyright(props) {\n  return (\n    <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://mui.com/\">\n        Your Website\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst theme = createTheme();\n\nexport default function SignUp() {\n\n  const [formState, setFormState] = useState({ \n    username: '', \n    email: '', \n    password: ''\n  });\n\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await addUser({\n        variables: {\n          username: formState.username,\n          email: formState.email,\n          password: formState.password\n        },\n      });\n      const token = mutationResponse.data.addUser.token;\n        Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    } \n    \n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <Link href=\"/signin\">Already have an account? Login</Link>\n        <form onSubmit={handleFormSubmit}>\n          <Grid container alignItems=\"center\" justifyContent=\"center\"  direction=\"column\">\n            <TextField\n              id=\"username\"\n              name=\"username\"\n              label=\"username\"\n              type=\"text\"\n              value={formState.username}\n              onChange={handleChange}\n            />\n            <TextField\n              id=\"email\"\n              name=\"email\"\n              label=\"email\"\n              type=\"text\"\n              value={formState.email}\n              onChange={handleChange}\n            />\n            <TextField\n              id=\"password\"\n              name=\"password\"\n              label=\"password\"\n              type=\"password\"\n              value={formState.password}\n              onChange={handleChange}\n            />\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n            Sign In\n          </Button>\n          </Grid>\n        </form>\n      </Container>\n    </ThemeProvider>\n  );\n}","import * as React from \"react\";\n\nfunction NotFound() {\n<h1>This page does not exist! Try again</h1>\n}\n\n\nexport default NotFound","import { gql } from '@apollo/client';\n\nexport const QUERY_GETUSER = gql`\n    query getUser($username: String!) {\n        getUser(username: $username) {\n            _id\n            username\n            email\n            habits {\n                _id\n                name\n                tracktionDays\n                createdAt\n            }\n            sharedHabits {\n                _id\n                name\n                tracktionDays\n                createdAt\n            }\n            goals {\n                _id\n                name\n                goalSteps {\n                    _id\n                    name\n                    completed\n                }\n                goalEndDate\n                createdAt\n            }\n        }\n    }\n`;\n\nexport const QUERY_ME = gql`\n{\n    me {\n        _id\n            username\n            email\n            habits {\n                _id\n                name\n                tracktionDays\n                createdAt\n            }\n            sharedHabits {\n                _id\n                name\n                tracktionDays\n                createdAt\n            }\n            goals {\n                _id\n                name\n                goalSteps {\n                    _id\n                    name\n                    completed\n                }\n                goalEndDate\n                createdAt\n            }\n    }\n}`","import React, { useState } from \"react\";\nimport { ADD_HABIT } from '../utils/actions';\nimport { useMutation } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries'\n// import { ADD_HABIT } from '../utils/mutations'\n\n\n// import redux elements \nimport { useSelector, useDispatch } from 'react-redux';\nimport { useQuery } from 'react-apollo';\n\n\n\nimport Avatar from \"@mui/material/Avatar\";\nimport Button from \"@mui/material/Button\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport TextField from \"@mui/material/TextField\";\nimport Grid from \"@mui/material/Grid\";\nimport Box from \"@mui/material/Box\";\nimport AddIcon from '@mui/icons-material/Add';\nimport Typography from \"@mui/material/Typography\";\nimport Container from \"@mui/material/Container\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\n\nconst theme = createTheme();\n\nexport default function HabitForm() {\n    // const { data } = useQuery(QUERY_ME);\n    const [newHabit, setNewHabit] = useState({name: ''});\n    const dispatch = useDispatch();\n    \n    // talk to Aaron: how to connect and access info from redux store in various components\n  \n    const handleFormSubmit = () => {\n      dispatch({\n        type: ADD_HABIT,\n        payload: {\n          newHabit\n        },\n      })\n    };\n\n    const handleChange = (event) => {\n      const { name, value } = event.target;\n      setNewHabit({\n        ...newHabit,\n        [name]: value,\n      });\n    }\n\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container component=\"main\" maxWidth=\"lg\">\n      <form onSubmit={handleFormSubmit}>\n        <Grid container alignItems=\"center\" justifyContent=\"center\"  direction=\"column\">\n          <Grid item>\n            <TextField\n            id=\"habitadd-input\"\n            name=\"name\"\n            label=\"Enter a new habit..\"\n            type=\"text\"\n            value={newHabit.name}\n            onChange={handleChange}\n            />\n          </Grid>\n          <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n          ADD HABIT\n        </Button>\n        </Grid>\n      </form>\n      </Container>\n    </ThemeProvider>\n  );\n};","import * as React from \"react\";\nimport Avatar from \"@mui/material/Avatar\";\nimport Button from \"@mui/material/Button\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport TextField from \"@mui/material/TextField\";\nimport Grid from \"@mui/material/Grid\";\nimport Box from \"@mui/material/Box\";\nimport ListAltIcon from \"@mui/icons-material/ListAlt\";\nimport Typography from \"@mui/material/Typography\";\nimport Container from \"@mui/material/Container\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\n\nconst theme = createTheme();\n\nconst HabitList = ({ user }) => {\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container component=\"main\" maxWidth=\"lg\">\n        <CssBaseline />\n        <Grid container spacing={2}>\n            <Grid item xs={5}>\n                \n            </Grid>\n        </Grid>\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default HabitList;","import React, { useState } from \"react\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { ADD_GOAL } from \"../utils/mutations\";\nimport { QUERY_ME } from \"../utils/queries\";\n\nimport AdapterDateFns from \"@mui/lab/AdapterMoment\";\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\nimport DatePicker from \"@mui/lab/DatePicker\";\nimport Avatar from \"@mui/material/Avatar\";\nimport Button from \"@mui/material/Button\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport TextField from \"@mui/material/TextField\";\nimport Grid from \"@mui/material/Grid\";\nimport Box from \"@mui/material/Box\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport Typography from \"@mui/material/Typography\";\nimport Container from \"@mui/material/Container\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\n\nconst theme = createTheme();\n\nconst GoalForm = () => {\n\n  const [formState, setFormState] = useState({\n    name: \"\",\n    steps: [],\n    endDate: \"\",\n  });\n\n  const [addGoal, { error }] = useMutation(ADD_GOAL, {\n    update(cache, { data: { addGoal } }) {\n      try {\n        const { goals } = cache.readQuery({ query: QUERY_ME });\n\n        cache.writeQuery({\n          query: QUERY_ME,\n          data: { goals: [addGoal, ...goals] },\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    },\n  });\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      // Execute mutation and pass in defined parameter data as variables\n      const { data } = await addGoal({\n        variables: { ...formState },\n      });\n\n      setFormState({\n        name: \"\",\n        steps: [],\n        endDate: \"\",\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\nconst handleChange = (event) => {\n  const { name, value } = event.target;\n  if (name === 'steps') {\n    setFormState({ ...formState, [name]: [value] })\n  } else {\n    setFormState({ ...formState, [name]: value });\n  }\n}\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container component=\"main\" maxWidth=\"lg\">\n        <CssBaseline />\n        <LocalizationProvider dateAdapter={AdapterDateFns}>\n          ...\n        </LocalizationProvider>\n\n        <Box\n          sx={{\n            marginTop: 8,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n          }}\n        >\n          <Avatar sx={{ m: 1, bgcolor: \"secondary.main\" }}>\n            <AddIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Add New Goal\n          </Typography>\n          <Box\n            component=\"form\"\n            onSubmit={handleFormSubmit}\n            noValidate\n            sx={{ mt: 1 }}\n          >\n            <TextField\n              margin=\"normal\"\n              fullWidth\n              id=\"name\"\n              placeholder=\"New Goal\"\n              value={formState.name}\n              onChange={handleChange}\n              name=\"name\"\n              autoComplete=\"name\"\n              autoFocus\n            />\n\n            {/* <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n              label=\"Goal End Date\"\n                value={formState.endDate}\n                onChange={(event) => setFormState(event.target.value)}\n                renderInput={(params) => <TextField {...params} />}\n              />\n            </LocalizationProvider> */}\n\n            <TextField\n              margin=\"normal\"\n              fullWidth\n              id=\"date\"\n              placeholder=\"Goal End Date\"\n              value={formState.endDate}\n              onChange={handleChange}\n              name=\"endDate\"\n              autoComplete=\"endDate\"\n              autoFocus\n            />\n\n            <TextField\n              margin=\"normal\"\n              fullWidth\n              id=\"goal\"\n              label=\"First Step\"\n              value={formState.steps}\n              onChange={handleChange}\n              name=\"steps\"\n              autoComplete=\"steps\"\n              autoFocus\n            />\n\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 }}\n            >\n              Save Goal\n            </Button>\n          </Box>\n        </Box>\n      </Container>\n    </ThemeProvider>\n  );\n};\n\nexport default GoalForm;\n","import React from \"react\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { ADD_GOAL_STEP } from \"../utils/mutations\";\nimport { QUERY_ME } from \"../utils/queries\";\n\nimport Avatar from \"@mui/material/Avatar\";\nimport Button from \"@mui/material/Button\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport TextField from \"@mui/material/TextField\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport Link from \"@mui/material/Link\";\nimport Grid from \"@mui/material/Grid\";\nimport Box from \"@mui/material/Box\";\nimport ListAltIcon from \"@mui/icons-material/ListAlt\";\nimport Typography from \"@mui/material/Typography\";\nimport Container from \"@mui/material/Container\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport { useState } from \"react\";\n\nconst theme = createTheme();\n\nconst GoalList = ({ goals }) => {\n  // if (!goals.length) {\n  //   return <h3>No Goals Yet</h3>;\n  // }\n  const [name, setName] = useState(\"\");\n\n  const [addGoalStep, { error }] = useMutation(ADD_GOAL_STEP);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const { data } = await addGoalStep({\n        variables: { name },\n      });\n      window.location.reload();\n      console.log(data);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container component=\"main\" maxWidth=\"lg\">\n        <CssBaseline />\n        <Box\n          sx={{\n            marginTop: 8,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n          }}\n        >\n          <Avatar sx={{ m: 1, bgcolor: \"secondary.main\" }}>\n            <ListAltIcon />\n          </Avatar>\n\n          {/* <div>\n            <Box sx={{ p: 2, m: 2, bgcolor: \"#f5f5f5\", borderRadius: 4 }}>\n              Goals:\n              {goals &&\n                goals.map((goal) => (\n                  <div key={goal._id}>\n                    <h4>\n                      Goal One:\n                      {goal.name}\n                    </h4>\n                    <ul> {goal.steps} </ul>\n                  </div>\n                ))}\n            </Box>\n          </div> */}\n\n          <div>\n      <h3 className=\"text-primary\">goals</h3>\n      <div className=\"flex-row justify-space-between my-4\">\n        {goals &&\n          goals.map((goal) => (\n            <div key={goal._id} className=\"col-12 col-xl-6\">\n              <div className=\"card mb-3\">\n                <h4 className=\"card-header bg-dark text-light p-2 m-0\">\n                  {goal.name} <br />\n                  <span className=\"text-white\" style={{ fontSize: '1rem' }}>\n                    currently has {goal.steps}{' '}\n                  </span>\n                </h4>\n              </div>\n            </div>\n          ))}\n      </div>\n    </div>\n          {/* <Box\n            component=\"form\"\n            onSubmit={handleFormSubmit}\n            noValidate\n            sx={{ mt: 1 }}\n          >\n            <TextField\n              margin=\"normal\"\n              fullWidth\n              id=\"step\"\n              label=\"Add Step\"\n              value={name}\n              onChange={(event) => setName(event.target.value)}\n              name=\"step\"\n              autoComplete=\"step\"\n              autoFocus\n            />\n            <Button type=\"submit\" variant=\"contained\" sx={{ mt: 3, mb: 2 }}>\n              Add Step\n            </Button>\n          </Box> */}\n        </Box>\n      </Container>\n    </ThemeProvider>\n  );\n};\n\nexport default GoalList;\n","import * as React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { Link } from \"react-router-dom\";\nimport Avatar from \"@mui/material/Avatar\";\nimport Button from \"@mui/material/Button\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport Container from \"@mui/material/Container\";\nimport Box from \"@mui/material/Box\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport HabitForm from \"../components/HabitForm\";\nimport HabitList from \"../components/HabitList\";\nimport GoalForm from \"../components/GoalForm\";\nimport GoalList from \"../components/GoalList\";\n\nimport { QUERY_ME } from '../utils/queries';\n\nconst theme = createTheme();\n\nconst Dashboard = () => {\n  const { loading, data } = useQuery(QUERY_ME);\n  const user = data?.user || [];\n  console.log(data)\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container component=\"main\" maxWidth=\"lg\">\n        <CssBaseline />\n        <Grid container sx={{ textAlign: \"left\" }}>\n          tracktion\n        </Grid>\n        <Grid\n          container\n          spacing={2}\n          sx={{ justifyContent: \"center\", textAlign: \"center\" }}\n        >\n          <Grid item xs={5}>\n            <Box sx={{ p: 2, m: 5, bgcolor: \"primary.main\", borderRadius: 4 }}>\n              <Typography component=\"h1\" variant=\"h5\">\n                Current Goals:\n              </Typography>\n            </Box>\n            <Box sx={{ p: 2, m: 2, bgcolor: \"#f5f5f5\", borderRadius: 4 }}>\n              <Button component={Link} to=\"/goals\" color=\"primary\">\n              {loading ? <h2> loading... </h2> : <GoalList/>}\n              </Button>\n            </Box>\n            <Box sx={{ p: 2, m: 2, bgcolor: \"#f5f5f5\", borderRadius: 4 }}>\n              {/* <Button component={Link} to=\"/goals\" color=\"primary\"> */}\n              <Button>\n                {loading ? <h2> loading... </h2> : <GoalList user={user} />}\n              </Button>\n            </Box>\n            <Box>\n              <GoalForm />\n            </Box>\n          </Grid>\n          <Grid item xs={5}>\n            <Box sx={{ p: 2, m: 5, bgcolor: \"primary.main\", borderRadius: 4 }}>\n              <Typography component=\"h1\" variant=\"h5\">\n                Current Habits:\n              </Typography>\n            </Box>\n            <Box>\n              {loading ? <h2> loading... </h2> : <HabitList user={user} />}\n            </Box>\n            <Box>\n              <HabitForm />\n            </Box>\n          </Grid>\n        </Grid>\n      </Container>\n    </ThemeProvider>\n  );\n};\n\nexport default Dashboard;\n","import GoalList from '../components/GoalList';\nimport GoalForm from \"../components/GoalForm\";\n\nexport default function GoalPage() {\n    return (\n<div>\n    <GoalList />\n    <GoalForm />\n</div>\n    )}","import HabitList from '../components/HabitList';\nimport HabitForm from \"../components/HabitForm\";\n\nexport default function HabitPage() {\n    return (\n        <div>\n            <HabitList />\n            <HabitForm />\n        </div>\n    )};","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\n\n// import redux provider and store\nimport { Provider } from 'react-redux';\nimport store from './utils/store'\n\nimport Navbar from \"./components/Navbar\";\nimport Footer from \"./components/Footer\";\nimport SignIn from \"./pages/SignIn\";\nimport SignUp from \"./pages/SignUp\";\nimport NotFound from \"./pages/NotFound\";\nimport Dashboard from \"./pages/Dashboard\";\nimport GoalPage from \"./pages/GoalPage\";\nimport HabitPage from \"./pages/HabitPage\";\n\nconst httpLink = createHttpLink({\n  uri: \"/graphql\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(\"id_token\");\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n        <Provider store={store}>\n            <Navbar />\n            <Switch>\n              <Route exact path=\"/\" component={SignIn} />\n              <Route path=\"/signup\" component={SignUp} />\n              <Route path=\"/signin\" component={SignIn} />\n              <Route path=\"/home\" component={Dashboard} />\n              <Route path=\"/goals\" component={GoalPage} />\n              <Route path=\"/habits\" component={HabitPage} />\n              <Route default component={NotFound}/>\n            </Switch>\n            <Footer /> \n        </Provider> \n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}